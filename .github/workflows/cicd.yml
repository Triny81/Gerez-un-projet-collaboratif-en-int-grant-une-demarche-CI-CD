name: CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # Job pour les tests backend
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      # Vérification du code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Installation de JDK 11 (ou ta version compatible avec Spring Boot)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # Construction et exécution des tests du backend avec Maven
      - name: Run backend tests and generate coverage
        run: |
          mvn clean verify
        working-directory: ./back

      # Téléchargement du rapport de couverture Jacoco
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: back/target/site/jacoco/
          
      - name: Cache SonarCloud dependencies
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-backend-${{ hashFiles('**/backend/**') }}
          restore-keys: |
            ${{ runner.os }}-sonar-backend-

      - name: Run SonarCloud analysis for Backend
        uses: sonarsource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=triny81_bobapp-backend
            -Dsonar.organization=triny81
            -Dsonar.sources=back/src
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.java.binaries=back/target/classes
            -Dsonar.junit.reportPaths=target/test-classes
            -Dsonar.coverage.jacoco.xmlReportPaths=back/target/site/jacoco/jacoco.xml

  # Job pour les tests frontend
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      # Vérification du code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Configuration de Node.js (Angular)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Installation des dépendances du frontend
      - name: Install dependencies
        run: npm install
        working-directory: ./front

      # Exécution des tests avec couverture
      - name: Run frontend tests and generate coverage
        run: npm run test -- --code-coverage --browsers=ChromeHeadless --watch=false
        working-directory: ./front

      # Téléchargement du rapport de couverture du frontend
      - name: Upload frontend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: front-coverage
          path: front/coverage/

      - name: Cache SonarCloud dependencies
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-frontend-${{ hashFiles('**/frontend/**') }}
          restore-keys: |
            ${{ runner.os }}-sonar-frontend-

      - name: Run SonarCloud analysis for Frontend
        uses: sonarsource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: ./front
          args: >
            -Dsonar.projectKey=triny81_bobapp-frontend
            -Dsonar.organization=triny81
            -Dsonar.sources=src
            -Dsonar.exclusions=node_modules/**,coverage/**,dist/**
            -Dsonar.tests=src
            -Dsonar.test.inclusions=src/**/*.spec.ts,src/**/*.test.ts
            -Dsonar.javascript.lcov.reportPaths=coverage/bobapp/lcov.info
            -Dsonar.qualitygate.wait=true
          
  docker-build-push:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]  # Attendre la validation des tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build et push du backend
      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/bobapp-backend:latest -f back/Dockerfile ./back
          docker push ${{ secrets.DOCKER_USERNAME }}/bobapp-backend:latest

      # Build et push du frontend
      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/bobapp-frontend:latest -f front/Dockerfile ./front
          docker push ${{ secrets.DOCKER_USERNAME }}/bobapp-frontend:latest
